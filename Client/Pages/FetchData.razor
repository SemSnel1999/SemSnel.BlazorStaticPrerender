@page "/fetchdata"
@inject HttpClient Http
@using System.Text.Json
@implements IDisposable

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (IsLoading)
{
    <p>loading...</p>
}
else
{
    @if (forecasts == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <table class="table">
            <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToUniversalTime().ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
            </tbody>
        </table>
    }

}

@code {
    private IEnumerable<WeatherForecast> forecasts;
    private PersistingComponentStateSubscription _persistingSubscription;

    public bool IsLoading { get; set; } = false;

    [Inject]
    public PersistentComponentState PersistentComponentState { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var url = "PageRoute";

        var isPeristed = PersistentComponentState.TryTakeFromJson<List<WeatherForecast>>(url, out var restored);

        if (isPeristed)
        {
            Console.WriteLine("Load restored...");
            
            forecasts = restored;
        }
        else
        {
            Console.WriteLine("Load from call...");
            
            forecasts = await Http.GetFromJsonAsync<List<WeatherForecast>>("sample-data/WeatherForecast.json");
        }
        
        StateHasChanged();
    }

    protected async override Task OnInitializedAsync()
    {
        _persistingSubscription = PersistentComponentState.RegisterOnPersisting(PersistContent);
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int) (TemperatureC / 0.5556);
    }
    
    private Task PersistContent()
    {
        PersistentComponentState.PersistAsJson("PageRoute", forecasts);

        return Task.CompletedTask;
    }

    public void Dispose()
    {
        _persistingSubscription.Dispose();
    }
}